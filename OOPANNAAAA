--[[
   Made By Bloom
   Macro GUI (Blue / Light Purple / Black Theme)
   - Rounded corners, 0.5 transparency
   - Draggable panel
   - Animated UI (fade/scale in, hover bounce, pulsing gradient)
   - Macro: Pull: ON  -> rope length = 5 (fast)
            Throw: OFF -> rope length = 44532 (gradual)
   - Open GUI only toggles Na/Gk visibility
   - GK: ON = pulse server Pit.Damage at grapple target for real kill; OFF = disabled
   - No notifications
]]

local Players        = game:GetService("Players")
local CoreGui        = game:GetService("CoreGui")
local TweenService   = game:GetService("TweenService")
local RunService     = game:GetService("RunService")
local UIS            = game:GetService("UserInputService")
local LP             = Players.LocalPlayer

-- === Colors ===
local BLACK       = Color3.fromRGB(0, 0, 0)
local BLUE_TXT    = Color3.fromRGB(100, 200, 255)
local LILAC_TXT   = Color3.fromRGB(180, 150, 255)
local PANEL_BG    = Color3.fromRGB(25, 25, 60)
local BTN_BG      = BLACK
local CORNER_PX   = 10

-- === Rope target lengths ===
local PULL_LEN    = 5
local THROW_LEN   = 44532

-- === Helpers ===
local function addCorner(parent, radius)
    local c = Instance.new("UICorner")
    c.CornerRadius = UDim.new(0, radius or CORNER_PX)
    c.Parent = parent
    return c
end

local function ui(obj, props, parent)
    for k,v in pairs(props) do obj[k] = v end
    obj.Parent = parent
    return obj
end

-- Draggable
local function makeDraggable(dragFrame, handle)
    handle = handle or dragFrame
    local dragging, dragStart, startPos
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = dragFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then dragging = false end
            end)
        end
    end)
    UIS.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            dragFrame.Position = UDim2.new(
                startPos.X.Scale, startPos.X.Offset + delta.X,
                startPos.Y.Scale, startPos.Y.Offset + delta.Y
            )
        end
    end)
end

-- Button hover bounce
local function attachHoverBounce(btn)
    local normal = btn.Size
    local over   = UDim2.new(normal.X.Scale, normal.X.Offset, 0, normal.Y.Offset + 2)
    btn.MouseEnter:Connect(function()
        TweenService:Create(btn, TweenInfo.new(0.08, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = over}):Play()
    end)
    btn.MouseLeave:Connect(function()
        TweenService:Create(btn, TweenInfo.new(0.08, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = normal}):Play()
    end)
end

-- Gentle glow on active
local function setGlow(btn, on)
    local uiStroke = btn:FindFirstChild("UIStroke") or Instance.new("UIStroke")
    uiStroke.Thickness = 1.8
    uiStroke.Transparency = 0.1
    uiStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    uiStroke.Parent = btn
    local color = on and BLUE_TXT or Color3.fromRGB(50,50,70)
    TweenService:Create(uiStroke, TweenInfo.new(0.15), {Color = color}):Play()
end

-- Title gradient animation (pulse)
local function attachPulsingGradient(label)
    local grad = Instance.new("UIGradient")
    grad.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.0, Color3.fromRGB(90,180,255)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(180,150,255)),
        ColorSequenceKeypoint.new(1.0, Color3.fromRGB(90,180,255)),
    }
    grad.Rotation = 0
    grad.Offset = Vector2.new(-1, 0)
    grad.Parent = label
    task.spawn(function()
        while label.Parent do
            TweenService:Create(grad, TweenInfo.new(2.0, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut), {Offset = Vector2.new(1,0)}):Play()
            task.wait(2.0)
            grad.Offset = Vector2.new(-1,0)
        end
    end)
end

-- === Root GUI ===
local gui = Instance.new("ScreenGui")
gui.Name = "BloomMacroGUI"
gui.ResetOnSpawn = false
gui.IgnoreGuiInset = true
gui.Parent = CoreGui

-- Main panel
local panel = ui(Instance.new("Frame"), {
    Size = UDim2.new(0, 210, 0, 160),
    Position = UDim2.new(0, 20, 0, 20),
    BackgroundColor3 = PANEL_BG,
    BackgroundTransparency = 0.5
}, gui)
addCorner(panel)

panel.Visible = false
panel.BackgroundTransparency = 1
panel.Visible = true
TweenService:Create(panel, TweenInfo.new(0.18, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0.5}):Play()

-- Padding + Layout
ui(Instance.new("UIPadding"), {
    PaddingTop = UDim.new(0, 8),
    PaddingBottom = UDim.new(0, 8),
    PaddingLeft = UDim.new(0, 10),
    PaddingRight = UDim.new(0, 10)
}, panel)

ui(Instance.new("UIListLayout"), {
    FillDirection = Enum.FillDirection.Vertical,
    HorizontalAlignment = Enum.HorizontalAlignment.Center,
    VerticalAlignment = Enum.VerticalAlignment.Top,
    SortOrder = Enum.SortOrder.LayoutOrder,
    Padding = UDim.new(0, 6)
}, panel)

-- Title
local title = ui(Instance.new("TextLabel"), {
    Size = UDim2.new(1, -20, 0, 26),
    BackgroundTransparency = 1,
    Text = "Made By bloom",
    Font = Enum.Font.Arcade,
    TextSize = 24,
    TextColor3 = BLUE_TXT,
    LayoutOrder = 1
}, panel)
attachPulsingGradient(title)

-- Macro toggle
local macroBtn = ui(Instance.new("TextButton"), {
    Size = UDim2.new(1, -20, 0, 42),
    BackgroundColor3 = BTN_BG,
    Text = "Throw: OFF",
    Font = Enum.Font.GothamMedium,
    TextSize = 20,
    TextColor3 = LILAC_TXT,
    LayoutOrder = 2
}, panel)
addCorner(macroBtn)
attachHoverBounce(macroBtn)

-- Open/Close GUI (Na & Gk)
local openBtn = ui(Instance.new("TextButton"), {
    Size = UDim2.new(1, -20, 0, 32),
    BackgroundColor3 = BTN_BG,
    Text = "Open GUI",
    Font = Enum.Font.Gotham,
    TextSize = 18,
    TextColor3 = LILAC_TXT,
    LayoutOrder = 3
}, panel)
addCorner(openBtn)
attachHoverBounce(openBtn)

-- Container (Na/Gk)
local inner = ui(Instance.new("Frame"), {
    Size = UDim2.new(1, -20, 0, 70),
    BackgroundTransparency = 1,
    LayoutOrder = 4,
    Visible = false
}, panel)

ui(Instance.new("UIListLayout"), {
    FillDirection = Enum.FillDirection.Vertical,
    HorizontalAlignment = Enum.HorizontalAlignment.Center,
    VerticalAlignment = Enum.VerticalAlignment.Top,
    SortOrder = Enum.SortOrder.LayoutOrder,
    Padding = UDim.new(0, 6)
}, inner)

-- Na: Inject
local naBtn = ui(Instance.new("TextButton"), {
    Size = UDim2.new(1, -20, 0, 30),
    BackgroundColor3 = BTN_BG,
    Text = "Na: Inject",
    Font = Enum.Font.Gotham,
    TextSize = 18,
    TextColor3 = LILAC_TXT,
    LayoutOrder = 1
}, inner)
addCorner(naBtn)
attachHoverBounce(naBtn)

-- Gk: ON/OFF
local gkBtn = ui(Instance.new("TextButton"), {
    Size = UDim2.new(1, -20, 0, 30),
    BackgroundColor3 = BTN_BG,
    Text = "Gk: OFF",
    Font = Enum.Font.Gotham,
    TextSize = 18,
    TextColor3 = LILAC_TXT,
    LayoutOrder = 2
}, inner)
addCorner(gkBtn)
attachHoverBounce(gkBtn)

inner.Parent = panel

-- === State ===
local macroPullOn = false
local innerOpen = false
local naInjected = false

-- GK state/listeners
local gkOn = false
local gk_addedConn
local killedDebounce = {} -- [Player/UserId] = tick() debounce

-- === Rope utils (for macro) ===
local function findPlayerRopeConstraint()
    local char = LP.Character or LP.CharacterAdded:Wait()
    for _, d in ipairs(workspace:GetDescendants()) do
        if d:IsA("RopeConstraint") then
            local a0, a1 = d.Attachment0, d.Attachment1
            if a0 and a1 and (a0:IsDescendantOf(char) or a1:IsDescendantOf(char)) then
                return d
            end
        end
    end
    return nil
end

local currentGradualConn
local function stopGradualRope()
    if currentGradualConn then currentGradualConn:Disconnect() currentGradualConn = nil end
end

local function graduallySetRopeLength(targetLen, duration)
    local rope = findPlayerRopeConstraint()
    if not rope then return end
    stopGradualRope()
    duration = math.max(0.001, duration or 0.2)
    local startLen, t0 = rope.Length, time()
    currentGradualConn = RunService.Heartbeat:Connect(function()
        local t = (time() - t0) / duration
        if t >= 1 then rope.Length = targetLen; stopGradualRope(); return end
        rope.Length = startLen + (targetLen - startLen) * t
    end)
end

-- legacy compat (no-ops)
local isFiring, isSecondButtonOn = false, false
local function updateToggleButton() end
local function updateRightButton() end
local function stopAllLoops()
    isFiring, isSecondButtonOn = false, false
    updateToggleButton()
    updateRightButton()
    stopGradualRope()
end

-- === GK internals (server-auth pulse using Pit.Damage) ===
local function pulseKill(targetHum)
    -- find server Damage part (your F-kill used this)
    local pit = workspace:FindFirstChild("Pit")
    local dmg = pit and pit:FindFirstChild("Damage")
    if not (dmg and dmg:IsA("BasePart")) then
        -- fallback (clienty, may be ignored by server)
        pcall(function()
            targetHum.BreakJointsOnDeath = true
            targetHum.Health = 0
        end)
        return
    end

    local hrp = targetHum.Parent:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    -- store & pulse
    local oldCF, oldSize = dmg.CFrame, dmg.Size
    -- small, fast pulse to avoid lag
    dmg.CanCollide = false
    dmg.CanQuery  = false
    dmg.CanTouch  = true
    dmg.CFrame    = hrp.CFrame
    dmg.Size      = Vector3.new(24, 24, 24)

    task.wait(0.06) -- quick touch window

    -- bury it again (donâ€™t weld, no physics)
    dmg.Size   = oldSize
    dmg.CFrame = CFrame.new(0, -5000, 0)
end

local function ropeOtherHumanoid(rope)
    local myChar = LP.Character
    if not (rope and myChar and rope.Attachment0 and rope.Attachment1) then return nil end
    local a0, a1 = rope.Attachment0, rope.Attachment1
    local mySide = (a0:IsDescendantOf(myChar) and a0) or (a1:IsDescendantOf(myChar) and a1) or nil
    if not mySide then return nil end
    local otherAtt = (mySide == a0) and a1 or a0
    local otherModel = otherAtt and otherAtt:FindFirstAncestorOfClass("Model")
    if not otherModel or otherModel == myChar then return nil end
    local otherPlr = Players:GetPlayerFromCharacter(otherModel)
    if not otherPlr or otherPlr == LP then return nil end
    return otherModel:FindFirstChildOfClass("Humanoid"), otherPlr
end

local function handleNewRope(rope)
    if not gkOn then return end
    local hum, plr = ropeOtherHumanoid(rope)
    if not hum or not plr then return end
    local now = tick()
    local last = killedDebounce[plr.UserId] or 0
    if now - last < 0.4 then return end
    killedDebounce[plr.UserId] = now
    pulseKill(hum)
end

local function enableGK()
    if gk_addedConn then gk_addedConn:Disconnect(); gk_addedConn = nil end
    table.clear(killedDebounce)
    gkOn = true

    -- watch new ropes only (no welds, no loops)
    gk_addedConn = workspace.DescendantAdded:Connect(function(inst)
        if not gkOn then return end
        if inst:IsA("RopeConstraint") then
            task.defer(function()
                handleNewRope(inst)
            end)
        end
    end)

    -- also check an existing rope right now (if already hooked)
    task.defer(function()
        local r = findPlayerRopeConstraint()
        if r then handleNewRope(r) end
    end)
end

local function disableGK()
    gkOn = false
    if gk_addedConn then gk_addedConn:Disconnect(); gk_addedConn = nil end
    table.clear(killedDebounce)
end

-- === UI Logic ===
openBtn.MouseButton1Click:Connect(function()
    innerOpen = not innerOpen
    inner.Visible = innerOpen
    openBtn.Text = innerOpen and "Close GUI" or "Open GUI"
    if innerOpen then
        for _, child in ipairs(inner:GetChildren()) do
            if child:IsA("GuiObject") then
                child.TextTransparency = 1
                TweenService:Create(child, TweenInfo.new(0.12), {TextTransparency = 0}):Play()
            end
        end
    end
end)

macroBtn.MouseButton1Click:Connect(function()
    macroPullOn = not macroPullOn
    stopAllLoops()
    if macroPullOn then
        macroBtn.Text = "Pull: ON"
        setGlow(macroBtn, true)
        graduallySetRopeLength(PULL_LEN, 0.3)
    else
        macroBtn.Text = "Throw: OFF"
        setGlow(macroBtn, false)
        graduallySetRopeLength(THROW_LEN, 1.2)
    end
end)

gkBtn.MouseButton1Click:Connect(function()
    if gkOn then
        gkBtn.Text = "Gk: OFF"
        setGlow(gkBtn, false)
        disableGK()
    else
        gkBtn.Text = "Gk: ON"
        setGlow(gkBtn, true)
        enableGK()
    end
end)

naBtn.MouseButton1Click:Connect(function()
    if naInjected then return end
    naBtn.Active = false
    naBtn.AutoButtonColor = false
    naBtn.Text = "Na: Injecting..."
    setGlow(naBtn, true)
    local ok = pcall(function()
        loadstring(game:HttpGet("https://scriptblox.com/raw/Universal-Script-Nameless-admin-9602"))()
    end)
    if ok then
        naInjected = true
        naBtn.Text = "Na: Injected"
    else
        naBtn.Text = "Na: Failed"
        setGlow(naBtn, false)
        task.delay(0.3, function()
            naBtn.Active = true
            naBtn.AutoButtonColor = true
            naBtn.Text = "Na: Inject"
        end)
    end
end)

-- Make panel draggable
makeDraggable(panel, title)
makeDraggable(panel, panel)
